<?xml version="1.0"?>
<!--
    MkLnk - Helper script for generating Start Menu shortcuts

    Copyright: 2017-2024 The Commons Conservancy
    SPDX-License-Identifier: GPL-3.0+
-->
<package>
	<job id="MkLnk">
		<runtime>
			<description>Creates shortcut to a program - Amebis, Copyright © 2015-2017</description>
			<unnamed name="&lt;Shortcut.lnk&gt;" required="true"  helpstring="Shortcut file to create"/>
			<unnamed name="&lt;Target&gt;"       required="true"  helpstring="Target file the shortcut invokes"/>
			<named   name="A"  type="string"     required="false" helpstring="Command line arguments"/>
			<named   name="F"  type="string"     required="false" helpstring="Start in folder"/>
			<named   name="S"  type="string"     required="false" helpstring="Shortcut key (Example: &quot;ALT+CTRL+F&quot;)"/>
			<named   name="R"  type="string"     required="false" helpstring="Run (Valid values: 1=Normal Window, 3=Maximized, 7=Minimized)"/>
			<named   name="LN" type="string"     required="false" helpstring="Localized name (Example: &quot;@resource.dll,-3&quot;"/>
			<named   name="C"  type="string"     required="false" helpstring="Comment"/>
			<named   name="I"  type="string"     required="false" helpstring="Icon (Example: &quot;SHELL32.DLL,1&quot;)"/>
			<example>
Example:
MkLnk.wsf &quot;%USERPROFILE%\Desktop\My shortcut.lnk&quot; &quot;%windir%\notepad.exe&quot; /R:3 /C:&quot;Starts the Notepad Maximized&quot;
</example>
		</runtime>
		<reference object="WScript.Shell"/>
		<reference object="Scripting.FileSystemObject"/>
		<script language="JScript"><![CDATA[
			if (WScript.Arguments.Unnamed.Length < 2) {
				WScript.Arguments.ShowUsage();
				WScript.Quit(1);
			}

			if (!String.prototype.trim) {
				var String_trim_re = new RegExp("^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$", "g");
				String.prototype.trim = function () {
					return this.replace(String_trim_re, '');
				};
			}

			var
				wsh = WScript.CreateObject("WScript.Shell");

			try {
				var link = wsh.CreateShortcut(WScript.Arguments.Unnamed(0));
	
				// Set shortcut's target.
				link.TargetPath = WScript.Arguments.Unnamed(1);

				if (WScript.Arguments.Named.Exists("A"))
					link.Arguments = WScript.Arguments.Named("A");

				if (WScript.Arguments.Named.Exists("F"))
					link.WorkingDirectory = WScript.Arguments.Named("F");

				if (WScript.Arguments.Named.Exists("S"))
					link.HotKey = WScript.Arguments.Named("S");

				if (WScript.Arguments.Named.Exists("R"))
					link.WindowStyle = parseInt(WScript.Arguments.Named("R"), 10);

				if (WScript.Arguments.Named.Exists("C"))
					link.Description = WScript.Arguments.Named("C");

				if (WScript.Arguments.Named.Exists("I"))
					link.IconLocation = WScript.Arguments.Named("I");

				link.Save();
			} catch (err) {
				// Clean-up!
				try {
					// Delete LNK file.
					var fso = WScript.CreateObject("Scripting.FileSystemObject");
					fso.DeleteFile(WScript.Arguments.Unnamed(0), true);
				} catch (err2) {}

				throw err;
			}

			if (WScript.Arguments.Named.Exists("LN")) {
				// Localizing shortcut name is localizing filename using desktop.ini.
				var fso = WScript.CreateObject("Scripting.FileSystemObject");
				var
					desktop_ini_filename = fso.GetParentFolderName(WScript.Arguments.Unnamed(0)) + "\\desktop.ini",
					desktop_ini = "",
					desktop_ini_section = "",
					LocalizedFileNames_present = false;
				
				// Read desktop.ini file
				var f = fso.OpenTextFile(desktop_ini_filename, ForReading, false, TristateTrue);
				try {
					var
						re_comment = new RegExp("^\\s*;(.*)$", "i"),
						re_section = new RegExp("^\\s*\\[([^\\]]*)\\]\\s*$", "i"),
						re_value   = new RegExp("^([^=]*)=(.*)$");
					var
						shortcut_filename = fso.GetFileName(WScript.Arguments.Unnamed(0)),
						shortcut_filename_lc = shortcut_filename.toLowerCase();
						
					while (!f.AtEndOfStream) {
						var line = f.ReadLine(), m;
						if (line.match(re_comment)) {
							// ; comment found.
							desktop_ini += line + "\r\n";
							continue;
						}

						if (m = line.match(re_section)) {
							// [section] found.
							desktop_ini_section = m[1].trim().toLowerCase();
							desktop_ini += line + "\r\n";
							if (desktop_ini_section == "localizedfilenames") {
								// Add our shortcut.
								LocalizedFileNames_present = true;
								desktop_ini += fso.GetFileName(WScript.Arguments.Unnamed(0)) + "=" + WScript.Arguments.Named("LN") + "\r\n";
							}
						} else if (m = line.match(re_value)) {
							// name=value pair found.
							if (desktop_ini_section == "localizedfilenames" && m[1].trim().toLowerCase() == shortcut_filename_lc) {
								// Our shortcut was found from before. Skip it.
							} else
								desktop_ini += line + "\r\n";
						} else {
							// Copy everything else.
							desktop_ini += line + "\r\n";
						}
					}
				} finally {
					f.Close();
				}

				if (!LocalizedFileNames_present)
					desktop_ini +=
						"[LocalizedFileNames]\r\n" +
						fso.GetFileName(WScript.Arguments.Unnamed(0)) + "=" + WScript.Arguments.Named("LN") + "\r\n";

				// desktop.ini files usually have hidden and/or system attributes. Reset them, or overwriting file will fail.
				try {
					var file = fso.GetFile(desktop_ini_filename);
					file.Attributes = Normal;
				} catch (err) {}

				// Write desktop.ini.
				var f = fso.OpenTextFile(desktop_ini_filename, ForWriting, true, TristateTrue);
				try {
					f.Write(desktop_ini);
				} finally {
					f.Close();
				}

				// Set hidden and system attributes.
				try {
					var file = fso.GetFile(desktop_ini_filename);
					file.Attributes |= Hidden | System;
				} catch (err) {}
			}

			WScript.Quit(0);
		]]></script>
	</job>
</package>
