<?xml version="1.0"?>
<!--
    VirusTotal - Helper script for VirusTotal interaction

    Copyright: 2024 The Commons Conservancy
    SPDX-License-Identifier: GPL-3.0+
-->
<package>
	<job id="Analyze">
		<runtime>
			<description>Upload file and wait for analysis</description>
			<unnamed name="&lt;source&gt;" helpstring="Source file" required="true"/>
			<unnamed name="&lt;response.json&gt;" helpstring="Response" required="false"/>
		</runtime>
		<reference object="ADODB.Stream"/>
		<reference object="Microsoft.XMLHTTP"/>
		<reference object="WScript.Shell"/>
		<script language="JScript" src="JSON.js"></script>
		<script language="JScript"><![CDATA[
			if (WScript.Arguments.Unnamed.Length < 1) {
				WScript.Arguments.ShowUsage();
				WScript.Quit(1);
			}

			var fso = WScript.CreateObject("Scripting.FileSystemObject");
			var wsh = WScript.CreateObject("WScript.Shell");
			var env = wsh.Environment("Process");
			var source_filename = WScript.Arguments.Unnamed(0);
			var response_filename = WScript.Arguments.Unnamed.Length >= 2 ? WScript.Arguments.Unnamed(1) : null;

			try {
				var upload_url = "https://www.virustotal.com/api/v3/files";
				if (fso.GetFile(source_filename).Size > 32000000) {
					var xmlhttp = WScript.CreateObject("Microsoft.XMLHTTP");
					xmlhttp.open("GET", "https://www.virustotal.com/api/v3/files/upload_url?seq=" + Math.random(), false);
					xmlhttp.setRequestHeader("Accept", "application/json");
					xmlhttp.setRequestHeader("x-apikey", env("VirusTotalAPIKey"));
					xmlhttp.send();
					if (xmlhttp.status != 200)
						throw new Error(xmlhttp.status, "HTTP request failed");
					upload_url = parseJSON(xmlhttp.responseText).data;
				}

				WScript.Echo(source_filename + ": Sending to VirusTotal...");
				var exec = wsh.Exec("curl.exe --request POST --url \"" + upload_url + "\" " +
					"--header \"Accept: application/json\" " +
					"--header \"Content-Type: multipart/form-data\" " +
					"--header \"x-apikey: " + env("VirusTotalAPIKey") + "\" " +
					"--form \"file=@" + source_filename + "\"");
				while (exec.Status === 0)
					WScript.Sleep(100)
				if (exec.Status != 1 || exec.ExitCode != 0)
					throw new Error(3, source_filename + ": Failed to upload file to VirusTotal");
				var response_text = exec.StdOut.ReadAll();

				for (var seq = 0;; seq++) {
					var analysis = parseJSON(response_text);
					if (analysis.data.type !== "analysis")
						throw new Error(1, source_filename + ": Response does not contain VirusTotal analysis data");
					WScript.Echo(source_filename + ": https://www.virustotal.com/gui/file-analysis/" + analysis.data.id + (("attributes" in analysis.data) ? " " + analysis.data.attributes.status : ""));

					if (("attributes" in analysis.data)) {
						if (analysis.data.attributes.status === "completed") {
							var clean = true;
							for (var i in analysis.data.attributes.results) {
								var result = analysis.data.attributes.results[i];
								switch (result.category.toLowerCase()) {
								case "undetected":
								case "type-unsupported":
								case "timeout":
								case "confirmed-timeout":
								case "failure":
									break;
								default:
									WScript.Echo(source_filename + ": " + result.engine_name + ": " + result.category);
									clean = false;
								}
							}
							WScript.Echo(source_filename + ": https://www.virustotal.com/gui/file/" + analysis.meta.file_info.sha256);
							if (!clean)
								throw new Error(2, source_filename + ": Some engines tests were not negative");
							WScript.Echo(source_filename + ": All engines tests were negative");
							if (response_filename) {
								var fs = WScript.CreateObject("ADODB.Stream");
								fs.Open();
								try {
									fs.Type = adTypeText;
									fs.LineSeparator = adCRLF;
									fs.Charset = "utf-8";
									fs.WriteText(response_text);
									fs.SaveToFile(response_filename, adSaveCreateOverWrite);
								} finally {
									fs.Close();
								}
							}
							break;
						} else if (analysis.data.attributes.status === "queued") {
							// WScript.Sleep(55000);
						} else
							throw new Error(5, "Unknown status: " + analysis.data.attributes.status);
					}

					WScript.Sleep(5000);
					var xmlhttp = WScript.CreateObject("Microsoft.XMLHTTP");
					xmlhttp.open("GET", analysis.data.links.self + "?seq=" + seq, false);
					xmlhttp.setRequestHeader("Accept", "application/json");
					xmlhttp.setRequestHeader("x-apikey", env("VirusTotalAPIKey"));
					xmlhttp.send();
					if (xmlhttp.status != 200)
						throw new Error(xmlhttp.status, "HTTP request failed");
					response_text = xmlhttp.responseText;
				}
			} catch (err) {
				if (response_filename) {
					// In case of error, delete the output file.
					if (fso.FileExists(response_filename))
						fso.DeleteFile(response_filename);
				}

				throw err;
			}

			WScript.Quit(0);
		]]></script>
	</job>
	<job id="Upload">
		<runtime>
			<description>Upload file for analysis</description>
			<unnamed name="&lt;source&gt;" helpstring="Source file" required="true"/>
			<unnamed name="&lt;response.json&gt;" helpstring="Response" required="false"/>
		</runtime>
		<reference object="ADODB.Stream"/>
		<reference object="Microsoft.XMLHTTP"/>
		<reference object="WScript.Shell"/>
		<script language="JScript" src="JSON.js"></script>
		<script language="JScript"><![CDATA[
			if (WScript.Arguments.Unnamed.Length < 1) {
				WScript.Arguments.ShowUsage();
				WScript.Quit(1);
			}

			var fso = WScript.CreateObject("Scripting.FileSystemObject");
			var wsh = WScript.CreateObject("WScript.Shell");
			var env = wsh.Environment("Process");
			var source_filename = WScript.Arguments.Unnamed(0);
			var response_filename = WScript.Arguments.Unnamed.Length >= 2 ? WScript.Arguments.Unnamed(1) : null;

			try {
				var upload_url = "https://www.virustotal.com/api/v3/files";
				if (fso.GetFile(source_filename).Size > 32000000) {
					var xmlhttp = WScript.CreateObject("Microsoft.XMLHTTP");
					xmlhttp.open("GET", "https://www.virustotal.com/api/v3/files/upload_url?seq=" + Math.random(), false);
					xmlhttp.setRequestHeader("Accept", "application/json");
					xmlhttp.setRequestHeader("x-apikey", env("VirusTotalAPIKey"));
					xmlhttp.send();
					if (xmlhttp.status != 200)
						throw new Error(xmlhttp.status, "HTTP request failed");
					upload_url = parseJSON(xmlhttp.responseText).data;
				}

				WScript.Echo(source_filename + ": Sending to VirusTotal...");
				var exec = wsh.Exec("curl.exe --request POST --url \"" + upload_url + "\" " +
					"--header \"Accept: application/json\" " +
					"--header \"Content-Type: multipart/form-data\" " +
					"--header \"x-apikey: " + env("VirusTotalAPIKey") + "\" " +
					"--form \"file=@" + source_filename + "\"");
				while (exec.Status === 0)
					WScript.Sleep(100)
				if (exec.Status != 1 || exec.ExitCode != 0)
					throw new Error(3, source_filename + ": Failed to upload file to VirusTotal");
				var response_text = exec.StdOut.ReadAll();

				var analysis = parseJSON(response_text);
				if (analysis.data.type !== "analysis")
					throw new Error(1, source_filename + ": Response does not contain VirusTotal analysis data");

				var analysis_gui_url = "https://www.virustotal.com/gui/file-analysis/" + analysis.data.id + (("attributes" in analysis.data) ? " " + analysis.data.attributes.status : "");
				WScript.Echo(source_filename + ": " + analysis_gui_url);

				var fs = WScript.CreateObject("ADODB.Stream");
				fs.Open();
				try {
					fs.Type = adTypeText;
					fs.LineSeparator = adCRLF;
					fs.Charset = "utf-8";
					fs.WriteText(response_text);
					fs.SaveToFile(response_filename, adSaveCreateOverWrite);
				} finally {
					fs.Close();
				}
			} catch (err) {
				if (response_filename) {
					// In case of error, delete the output file.
					if (fso.FileExists(response_filename))
						fso.DeleteFile(response_filename);
				}

				throw err;
			}

			WScript.Quit(0);
		]]></script>
	</job>
	<job id="JoinAnalysis">
		<runtime>
			<description>Upload file for analysis</description>
			<unnamed name="&lt;response.json&gt;" helpstring="Response from Upload job" required="true"/>
		</runtime>
		<reference object="ADODB.Stream"/>
		<reference object="Microsoft.XMLHTTP"/>
		<reference object="WScript.Shell"/>
		<script language="JScript" src="JSON.js"></script>
		<script language="JScript"><![CDATA[
			if (WScript.Arguments.Unnamed.Length < 1) {
				WScript.Arguments.ShowUsage();
				WScript.Quit(1);
			}

			var fso = WScript.CreateObject("Scripting.FileSystemObject");
			var wsh = WScript.CreateObject("WScript.Shell");
			var env = wsh.Environment("Process");
			var response_filename = WScript.Arguments.Unnamed(0);

			var fs = WScript.CreateObject("ADODB.Stream");
			fs.Open();
			try {
				fs.Type = adTypeText;
				fs.LineSeparator = adCRLF;
				fs.Charset = "utf-8";
				fs.LoadFromFile(response_filename);
				var response_text = fs.ReadText(adReadAll);
			} finally {
				fs.Close();
			}

			for (var seq = 0;; seq++) {
				var analysis = parseJSON(response_text);
				if (analysis.data.type !== "analysis")
					throw new Error(1, response_filename + ": Response does not contain VirusTotal analysis data");
				WScript.Echo(response_filename + ": https://www.virustotal.com/gui/file-analysis/" + analysis.data.id + (("attributes" in analysis.data) ? " " + analysis.data.attributes.status : ""));

				if (("attributes" in analysis.data)) {
					if (analysis.data.attributes.status === "completed") {
						var clean = true;
						for (var i in analysis.data.attributes.results) {
							var result = analysis.data.attributes.results[i];
							switch (result.category.toLowerCase()) {
							case "undetected":
							case "type-unsupported":
							case "timeout":
							case "confirmed-timeout":
							case "failure":
								break;
							default:
								WScript.Echo(response_filename + ": " + result.engine_name + ": " + result.category);
								clean = false;
							}
						}
						WScript.Echo(response_filename + ": https://www.virustotal.com/gui/file/" + analysis.meta.file_info.sha256);
						if (!clean)
							throw new Error(2, response_filename + ": Some engines tests were not negative");
						WScript.Echo(response_filename + ": All engines tests were negative");
						break;
					} else if (analysis.data.attributes.status === "queued") {
						// WScript.Sleep(55000);
					} else
						throw new Error(5, "Unknown status: " + analysis.data.attributes.status);
				}

				WScript.Sleep(5000);
				var xmlhttp = WScript.CreateObject("Microsoft.XMLHTTP");
				xmlhttp.open("GET", analysis.data.links.self + "?seq=" + seq, false);
				xmlhttp.setRequestHeader("Accept", "application/json");
				xmlhttp.setRequestHeader("x-apikey", env("VirusTotalAPIKey"));
				xmlhttp.send();
				if (xmlhttp.status != 200)
					throw new Error(xmlhttp.status, "HTTP request failed");
				response_text = xmlhttp.responseText;
			}

			WScript.Quit(0);
		]]></script>
	</job>
</package>
