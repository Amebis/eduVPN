<?xml version="1.0"?>
<!--
    MSI - Helper script for Microsoft Installer database manipulation

    Copyright: 2017-2024 The Commons Conservancy
    SPDX-License-Identifier: GPL-3.0+
-->
<package>
	<job id="MakeMST">
		<runtime>
			<description>Build MSI language from differences between two MSI files.</description>
			<unnamed name="&lt;source.msi&gt;" helpstring="Original MSI file" required="true"/>
			<unnamed name="&lt;destination.msi&gt;" helpstring="Updated MSI file" required="true"/>
			<unnamed name="&lt;diff.mst&gt;" helpstring="Output MST file" required="true"/>
		</runtime>
		<script language="JScript"><![CDATA[
			if (WScript.Arguments.Unnamed.Length < 3) {
				WScript.Arguments.ShowUsage();
				WScript.Quit(1);
			}

			var
				fso      = WScript.CreateObject("Scripting.FileSystemObject"),
				mst_path = WScript.Arguments.Unnamed(2);

			try {
				var
					installer = WScript.CreateObject("WindowsInstaller.Installer"),
					db_src    = installer.OpenDatabase(WScript.Arguments.Unnamed(0), /*msiOpenDatabaseModeReadOnly*/0),
					db_dst    = installer.OpenDatabase(WScript.Arguments.Unnamed(1), /*msiOpenDatabaseModeReadOnly*/0);

				// Create transform.
				db_dst.GenerateTransform(db_src, mst_path);
				db_dst.CreateTransformSummaryInfo(db_src, mst_path, /*msiTransformErrorNone*/0, /*msiTransformValidationNone*/0);
			} catch (err) {
				// In case of error, delete the output file.
				if (fso.FileExists(mst_path))
					fso.DeleteFile(mst_path);

				throw err;
			}

			WScript.Quit(0);
		]]></script>
	</job>
	<job id="AddStorage">
		<runtime>
			<description>Adds sub-storage to MSI file.</description>
			<unnamed name="&lt;database.msi&gt;" helpstring="MSI database file" required="true"/>
			<unnamed name="&lt;transform.mst&gt;" helpstring="MST file to add as a sub-storage" required="true"/>
			<unnamed name="&lt;name&gt;" helpstring="Sub-storage name" required="true"/>
			<named name="L" helpstring="Add transform to the list of language transforms" type="boolean" required="false"/>
		</runtime>
		<script language="JScript"><![CDATA[
			if (WScript.Arguments.Unnamed.Length < 3) {
				WScript.Arguments.ShowUsage();
				WScript.Quit(1);
			}

			var
				fso      = WScript.CreateObject("Scripting.FileSystemObject"),
				msi_path = WScript.Arguments.Unnamed(0);

			try {
				var
					installer   = WScript.CreateObject("WindowsInstaller.Installer"),
					database    = installer.OpenDatabase(msi_path, /*msiOpenDatabaseModeTransact*/1),
					view        = database.OpenView("SELECT Name,Data FROM _Storages"),
					record      = installer.CreateRecord(2),
					stream_path = WScript.Arguments.Unnamed(1),
					stream_name = WScript.Arguments.Unnamed(2);

				try {
					// Inserts or updates sub-storage.
					record.StringData(1) = stream_name;
					view.Execute(record);
					record.SetStream(2, stream_path);
					view.Modify(/*msiViewModifyAssign*/3, record);
				} catch (err) {
					throw new Error(err.number, "" + stream_path + ": " + err.description);
				}

				if (WScript.Arguments.Named.Exists("L") && WScript.Arguments.Named("L") != false) {
					// Get platform.
					var
						sumInfo   = database.SummaryInformation(1),
						template  = sumInfo.Property(/*PID_TEMPLATE*/7),
						idx_delim = template.indexOf(";"),
						platform  = idx_delim >= 0 ? template.substring(0, idx_delim + 1) : ";",
						languages = idx_delim >= 0 ? template.substring(idx_delim + 1).split(new RegExp("\\s*,\\s*")) : new Array();

					languages.push(stream_name);
					
					// Set template property.
					sumInfo.Property(/*PID_TEMPLATE*/7) = platform + languages.join(",");
					sumInfo.Persist();
				}

				// Commit database
				database.Commit();
			} catch (err) {
				// In case of error, delete the output file.
				if (fso.FileExists(msi_path))
					fso.DeleteFile(msi_path);

				throw err;
			}

			WScript.Quit(0);
		]]></script>
	</job>
</package>
