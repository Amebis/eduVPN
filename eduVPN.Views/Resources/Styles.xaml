<!--
    eduVPN - VPN for education and research

    Copyright: 2017-2020 The Commons Conservancy eduVPN Programme
    SPDX-License-Identifier: GPL-3.0+
-->
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:prop="clr-namespace:eduVPN.Properties;assembly=eduVPN"
    xmlns:controls="clr-namespace:eduVPN.Views.Controls"
    xmlns:models="clr-namespace:eduVPN.Models;assembly=eduVPN"
    xmlns:res="clr-namespace:eduVPN.Views.Resources">

    <!--
        Generic Styles
    -->

    <SolidColorBrush x:Key="WindowBrush" Color="{DynamicResource WindowColor}"/>
    <SolidColorBrush x:Key="WindowTextBrush" Color="{DynamicResource BodytextAColor}"/>
    <SolidColorBrush x:Key="PlaceholderTextBrush" Color="{DynamicResource PlaceholderTextColor}"/>
    <SolidColorBrush x:Key="HeadingBrush" Color="{DynamicResource BodytextCColor}"/>
    <SolidColorBrush x:Key="ButtonBrush" Color="{DynamicResource BodytextBColor}"/>
    <SolidColorBrush x:Key="ButtonTextBrush" Color="{DynamicResource BodytextAColor}"/>
    <SolidColorBrush x:Key="AuxButtonTextBrush" Color="{DynamicResource AuxButtonTextColor}"/>
    <SolidColorBrush x:Key="ButtonBorderBrush" Color="{DynamicResource ButtonBorderColor}"/>
    <SolidColorBrush x:Key="ButtonSelectedBrush" Color="{DynamicResource ClickTapColor}"/>
    <SolidColorBrush x:Key="ButtonSelectedTextBrush" Color="{DynamicResource BodytextBColor}"/>
    <SolidColorBrush x:Key="LinkButtonTextBrush" Color="{DynamicResource ClickTapColor}"/>
    <SolidColorBrush x:Key="CarretBrush" Color="{DynamicResource BodytextCColor}"/>
    <SolidColorBrush x:Key="ImportantTextBrush" Color="{DynamicResource BodytextCColor}"/>

    <DrawingBrush
        x:Key="ControlFocusVisualBrush"
        Stretch="None"
        TileMode="Tile"
        Viewport="0,0,4,4"
        ViewportUnits="Absolute">
        <DrawingBrush.Drawing>
            <DrawingGroup>
                <GeometryDrawing Brush="{StaticResource ButtonTextBrush}">
                    <GeometryDrawing.Geometry>
                        <GeometryGroup>
                            <RectangleGeometry Rect="0,0,2,2"/>
                            <RectangleGeometry Rect="2,2,2,2"/>
                        </GeometryGroup>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
                <GeometryDrawing Brush="{StaticResource ButtonBrush}">
                    <GeometryDrawing.Geometry>
                        <GeometryGroup>
                            <RectangleGeometry Rect="2,0,2,2"/>
                            <RectangleGeometry Rect="0,2,2,2"/>
                        </GeometryGroup>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
            </DrawingGroup>
        </DrawingBrush.Drawing>
    </DrawingBrush>

    <FontFamily x:Key="OpenSansFont">pack://application:,,,/eduVPN.Views;component/Resources/Fonts/#Open Sans</FontFamily>

    <Style x:Key="SeparatorStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}"/>
        <Setter Property="BorderThickness" Value="0,1,0,0"/>
    </Style>

    <Style x:Key="FocusVisualStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Stroke="{StaticResource ControlFocusVisualBrush}"
                        StrokeThickness="1"
                        RadiusX="3" RadiusY="3"
                        Opacity="0.75">
                    </Rectangle>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ControlStyle" TargetType="{x:Type Control}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Foreground" Value="{StaticResource WindowTextBrush}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualStyle}"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.25"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ActionControlStyle" TargetType="{x:Type Control}" BasedOn="{StaticResource ControlStyle}">
        <Setter Property="Cursor" Value="Hand"/>
    </Style>

    <Style x:Key="HeadingControlStyle" TargetType="{x:Type Control}">
        <Setter Property="FontWeight" Value="{x:Static FontWeights.Bold}"/>
        <Setter Property="FontStretch" Value="{x:Static FontStretches.SemiCondensed}"/>
        <Setter Property="Foreground" Value="{StaticResource HeadingBrush}"/>
    </Style>


    <!--
        Scroll bars
    -->

    <Style x:Key="ScrollBarLineButtonStyle" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource ControlStyle}">
        <Setter Property="Foreground" Value="{StaticResource ButtonTextBrush}"/>
        <Setter Property="Background" Value="{StaticResource ButtonBrush}"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border
                        Background="{TemplateBinding Background}"
                        CornerRadius="2">
                        <Path
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Fill="{TemplateBinding Foreground}"
                            Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarPageButtonStyle" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource ControlStyle}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumbStyle" TargetType="{x:Type Thumb}" BasedOn="{StaticResource ControlStyle}">
        <Setter Property="MinHeight" Value="4"/>
        <Setter Property="MinWidth" Value="4"/>
        <Setter Property="Background" Value="{StaticResource ButtonTextBrush}"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border
                        Background="{TemplateBinding Background}"
                        CornerRadius="2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="3">
            <Grid Margin="{TemplateBinding Padding}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="9"/>
                    <RowDefinition Height="0.00001*"/>
                    <RowDefinition Height="9"/>
                </Grid.RowDefinitions>
                <RepeatButton
                    Grid.Row="0"
                    Foreground="{TemplateBinding Foreground}"
                    Background="{TemplateBinding Background}"
                    Style="{StaticResource ScrollBarLineButtonStyle}"
                    Height="9"
                    Command="ScrollBar.LineUpCommand"
                    Content="M 0 4 L 8 4 L 4 0 Z"/>
                <Track
                    x:Name="PART_Track"
                    Grid.Row="1"
                    IsDirectionReversed="True">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton
                            Style="{StaticResource ScrollBarPageButtonStyle}"
                            Command="ScrollBar.PageUpCommand"/>
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb
                            Background="{TemplateBinding Foreground}"
                            Style="{StaticResource ScrollBarThumbStyle}"/>
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton
                            Style="{StaticResource ScrollBarPageButtonStyle}"
                            Command="ScrollBar.PageDownCommand"/>
                    </Track.IncreaseRepeatButton>
                </Track>
                <RepeatButton
                    Grid.Row="2"
                    Foreground="{TemplateBinding Foreground}"
                    Background="{TemplateBinding Background}"
                    Style="{StaticResource ScrollBarLineButtonStyle}"
                    Height="9"
                    Command="ScrollBar.LineDownCommand"
                    Content="M 0 0 L 4 4 L 8 0 Z"/>
            </Grid>
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="3">
            <Grid Margin="{TemplateBinding Padding}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="9"/>
                    <ColumnDefinition Width="0.00001*"/>
                    <ColumnDefinition Width="9"/>
                </Grid.ColumnDefinitions>
                <RepeatButton
                    Grid.Column="0"
                    Foreground="{TemplateBinding Foreground}"
                    Background="{TemplateBinding Background}"
                    Style="{StaticResource ScrollBarLineButtonStyle}"
                    Width="9"
                    Command="ScrollBar.LineLeftCommand"
                    Content="M 4 0 L 4 8 L 0 4 Z"/>
                <Track
                    x:Name="PART_Track"
                    Grid.Column="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton
                            Style="{StaticResource ScrollBarPageButtonStyle}"
                            Command="ScrollBar.PageLeftCommand"/>
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb
                            Background="{TemplateBinding Foreground}"
                            Style="{StaticResource ScrollBarThumbStyle}"/>
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton
                            Style="{StaticResource ScrollBarPageButtonStyle}"
                            Command="ScrollBar.PageRightCommand"/>
                    </Track.IncreaseRepeatButton>
                </Track>
                <RepeatButton
                    Grid.Column="2"
                    Foreground="{TemplateBinding Foreground}"
                    Background="{TemplateBinding Background}"
                    Style="{StaticResource ScrollBarLineButtonStyle}"
                    Width="9"
                    Command="ScrollBar.LineRightCommand"
                    Content="M 0 0 L 4 4 L 0 8 Z"/>
            </Grid>
        </Border>
    </ControlTemplate>

    <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource ControlStyle}">
        <Setter Property="Foreground" Value="{StaticResource AuxButtonTextBrush}"/>
        <Setter Property="Background" Value="{StaticResource ButtonBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="3"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="15"/>
                <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}"/>
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="15"/>
                <Setter Property="Height" Value="Auto"/>
                <Setter Property="Template" Value="{StaticResource VerticalScrollBar}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--
        Texts
    -->

    <Style x:Key="HeadingStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontWeight" Value="{x:Static FontWeights.Bold}"/>
        <Setter Property="FontStretch" Value="{x:Static FontStretches.SemiCondensed}"/>
        <Setter Property="Foreground" Value="{StaticResource HeadingBrush}"/>
    </Style>

    <Style x:Key="MainHeadingStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource HeadingStyle}">
        <Setter Property="FontSize" Value="18"/>
    </Style>

    <Style x:Key="SubHeadingStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource HeadingStyle}">
        <Setter Property="FontSize" Value="15"/>
    </Style>

    <Style x:Key="MicroHeadingStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource HeadingStyle}">
        <Setter Property="FontSize" Value="9"/>
        <Setter Property="controls:TextBlock.CharacterCasing" Value="Upper"/>
    </Style>

    <Style x:Key="PlaceholderStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource PlaceholderTextBrush}"/>
    </Style>

    <Style x:Key="TitleStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="18"/>
    </Style>

    <Style x:Key="NoteStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

    <Style x:Key="FineprintNoteStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource NoteStyle}">
        <Setter Property="FontSize" Value="10"/>
    </Style>

    <Style x:Key="LabelStyle" TargetType="{x:Type Label}" BasedOn="{StaticResource ControlStyle}">
        <Setter Property="Padding" Value="3,5"/>
    </Style>

    <Style TargetType="{x:Type Label}" BasedOn="{StaticResource LabelStyle}">
    </Style>

    <Style x:Key="HeadingLabelStyle" TargetType="{x:Type Label}" BasedOn="{StaticResource LabelStyle}">
        <Setter Property="FontWeight" Value="{x:Static FontWeights.Bold}"/>
        <Setter Property="FontStretch" Value="{x:Static FontStretches.SemiCondensed}"/>
        <Setter Property="Foreground" Value="{StaticResource HeadingBrush}"/>
        <Setter Property="controls:Label.CharacterCasing" Value="Upper"/>
    </Style>

    <Style x:Key="ImportantStyle" TargetType="{x:Type TextElement}">
        <Setter Property="Foreground" Value="{StaticResource ImportantTextBrush}"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>


    <!--
        Text boxes
    -->

    <Style x:Key="TextBoxControlStyle" TargetType="{x:Type Control}" BasedOn="{StaticResource ControlStyle}">
        <Setter Property="Foreground" Value="{StaticResource ButtonTextBrush}"/>
        <Setter Property="Background" Value="{StaticResource ButtonBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="Padding" Value="5"/>
    </Style>

    <Style x:Key="TextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxControlStyle}">
        <Setter Property="SelectionBrush" Value="{StaticResource ButtonSelectedBrush}"/>
        <Setter Property="CaretBrush" Value="{StaticResource CarretBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5">
                        <Grid>
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                Focusable="False"
                                Padding="{TemplateBinding Padding}"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <TextBlock
                                x:Name="UserMessage"
                                Padding="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Text="{TemplateBinding AutomationProperties.Name}"
                                IsHitTestVisible="False"
                                Visibility="Hidden"
                                Style="{StaticResource PlaceholderStyle}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value=""/>
                                <Condition Property="IsKeyboardFocusWithin" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter
                                TargetName="UserMessage"
                                Property="Visibility"
                                Value="Visible"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxStyle}"/>


    <!--
        Lists
    -->

    <Style x:Key="ListBoxItemBaseStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource ControlStyle}">
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}"/>
        <Setter Property="Padding" Value="3,5"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <Style x:Key="ListBoxItemStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource ListBoxItemBaseStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="0,1,0,0">
                        <ContentPresenter
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="{StaticResource ButtonSelectedTextBrush}"/>
                <Setter Property="Background" Value="{StaticResource ButtonSelectedBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource ListBoxItemStyle}"/>

    <Style x:Key="ListBoxStyle" TargetType="{x:Type ListBox}" BasedOn="{StaticResource ControlStyle}">
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemStyle}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
    </Style>

    <Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource ListBoxStyle}"/>

    <Style x:Key="ClickableListBoxItemStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource ListBoxItemBaseStyle}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="0,1,0,0">
                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"/>
                            <ContentControl
                                Grid.Column="1"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Center"
                                Foreground="{TemplateBinding Foreground}"
                                ContentTemplate="{StaticResource ChevronRightIcon}"
                                IsTabStop="False"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--
        Combo Boxes
    -->

    <Style x:Key="ComboBoxPopupStyle" TargetType="{x:Type Popup}">
        <Setter Property="Placement" Value="Bottom"/>
        <Setter Property="AllowsTransparency" Value="true"/>
        <Setter Property="PopupAnimation" Value="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"/>
    </Style>

    <Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource TextBoxControlStyle}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="OuterGrid">
                        <ToggleButton
                            x:Name="Button"
                            IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Foreground="{TemplateBinding Foreground}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            IsTabStop="False"
                            Focusable="False">
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <Border
                                        x:Name="Border"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        CornerRadius="5">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>

                                            <ContentPresenter
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                                            <ContentControl
                                                x:Name="Chevron"
                                                Grid.Column="1"
                                                Margin="5"
                                                HorizontalAlignment="Right"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                Foreground="{TemplateBinding Foreground}"
                                                ContentTemplate="{StaticResource ChevronDownIcon}"
                                                IsTabStop="False"/>
                                        </Grid>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsChecked" Value="True">
                                            <Setter TargetName="Border" Property="CornerRadius" Value="5,5,0,0"/>
                                            <Setter TargetName="Chevron" Property="ContentTemplate" Value="{StaticResource ChevronUpIcon}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ToggleButton.Template>
                            <ContentPresenter
                                Margin="{TemplateBinding Padding}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                Content="{TemplateBinding SelectionBoxItem}"
                                ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"/>
                        </ToggleButton>

                        <Popup
                            x:Name="PART_Popup"
                            IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                            Style="{StaticResource ComboBoxPopupStyle}">
                            <Border
                                MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                MinWidth="{Binding ActualWidth, ElementName=OuterGrid}"
                                HorizontalAlignment="Stretch"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                                <ScrollViewer>
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"/>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ComboBox}">
                            <Grid x:Name="OuterGrid">
                                <Border
                                    x:Name="Border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="5">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>

                                        <TextBox
                                            x:Name="PART_EditableTextBox"
                                            Padding="{TemplateBinding Padding}"
                                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                            IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}">
                                            <TextBox.Template>
                                                <ControlTemplate TargetType="{x:Type TextBox}">
                                                    <ScrollViewer
                                                        x:Name="PART_ContentHost"
                                                        Focusable="False"
                                                        Padding="{TemplateBinding Padding}"
                                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                </ControlTemplate>
                                            </TextBox.Template>
                                        </TextBox>

                                        <ToggleButton
                                            Grid.Column="1"
                                            IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                            IsTabStop="False"
                                            Focusable="False">
                                            <ToggleButton.Template>
                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                    <ContentControl
                                                        x:Name="Chevron"
                                                        Margin="5"
                                                        Foreground="{TemplateBinding Foreground}"
                                                        ContentTemplate="{StaticResource ChevronDownIcon}"
                                                        IsTabStop="False"/>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsChecked" Value="True">
                                                            <Setter TargetName="Chevron" Property="ContentTemplate" Value="{StaticResource ChevronUpIcon}"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </ToggleButton.Template>
                                        </ToggleButton>
                                    </Grid>
                                </Border>

                                <Popup
                                    x:Name="PART_Popup"
                                    IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                    Style="{StaticResource ComboBoxPopupStyle}">
                                    <Border
                                        MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                        MinWidth="{Binding ActualWidth, ElementName=OuterGrid}"
                                        HorizontalAlignment="Stretch"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}">
                                        <ScrollViewer>
                                            <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"/>
                                        </ScrollViewer>
                                    </Border>
                                </Popup>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--
        Buttons
    -->

    <Style x:Key="ButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource ActionControlStyle}">
        <Setter Property="Foreground" Value="{StaticResource ButtonTextBrush}"/>
        <Setter Property="Background" Value="{StaticResource ButtonBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="3">
                        <ContentPresenter
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonStyle}">
        <Setter Property="Width" Value="100"/>
        <Setter Property="Height" Value="18"/>
    </Style>

    <Style x:Key="NavigationButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonStyle}">
        <Setter Property="Width" Value="26"/>
        <Setter Property="Height" Value="26"/>
        <Setter Property="Margin" Value="7,0"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AuxButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource ActionControlStyle}">
        <Setter Property="Width" Value="15"/>
        <Setter Property="Height" Value="15"/>
        <Setter Property="Margin" Value="4"/>
        <Setter Property="Foreground" Value="{StaticResource AuxButtonTextBrush}"/>
        <Setter Property="Background" Value="{StaticResource WindowBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Background="{TemplateBinding Background}"
                        CornerRadius="3">
                        <ContentPresenter
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LinkButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource ActionControlStyle}">
        <Setter Property="Foreground" Value="{StaticResource LinkButtonTextBrush}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type TextBlock}">
                    <TextBlock
                        TextDecorations="Underline"
                        Text="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <!-- No button frame or adornments -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ContentPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ActionControlStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Margin="{TemplateBinding Padding}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                        <Canvas
                            Grid.Column="1"
                            Width="53" Height="23"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Canvas.RenderTransform>
                                <TransformGroup>
                                    <!-- Scale 70×30 to 53×23 -->
                                    <ScaleTransform ScaleX="0.75" ScaleY="0.75"/>
                                </TransformGroup>
                            </Canvas.RenderTransform>
                            <Rectangle
                                x:Name="Slot"
                                Fill="#B2B2B2"
                                Width="70" Height="30"
                                RadiusX="15" RadiusY="15"/>
                            <Rectangle
                                x:Name="Knob"
                                Fill="#FFFFFF"
                                Margin="4,4,0,0"
                                Width="34" Height="22"
                                RadiusX="11" RadiusY="11"/>
                        </Canvas>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Slot" Property="Fill" Value="#16A566"/>
                            <Setter TargetName="Knob" Property="Margin" Value="32,4,0,0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--
        Check-boxes
    -->

    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource ControlStyle}">
        <Setter Property="Foreground" Value="{StaticResource ButtonTextBrush}"/>
        <Setter Property="Background" Value="{StaticResource ButtonBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="5,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Border
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="3"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Width="15" Height="15">
                            <Canvas
                                x:Name="Checkmark"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Width="10" Height="10"
                                Visibility="Hidden">
                                <Canvas.RenderTransform>
                                    <TransformGroup>
                                        <RotateTransform Angle="45" CenterX="5" CenterY="5"/>
                                    </TransformGroup>
                                </Canvas.RenderTransform>
                                <Polyline
                                    Stroke="{TemplateBinding Foreground}"
                                    StrokeThickness="2"
                                    StrokeStartLineCap="Round"
                                    StrokeEndLineCap="Round"
                                    StrokeLineJoin="Round"
                                    Points="2 9 6 9 6 0"/>
                            </Canvas>
                        </Border>
                        <ContentPresenter
                            Grid.Column="1"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Checkmark" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--
        Progress bars
    -->

    <Style TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource ControlStyle}">
        <Setter Property="Foreground" Value="{StaticResource AuxButtonTextBrush}"/>
        <Setter Property="Background" Value="{StaticResource ButtonBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Height" Value="15"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="3">
                        <Grid>
                            <Rectangle x:Name="PART_Track"/>
                            <Decorator
                                x:Name="PART_Indicator"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}">
                                <Border
                                    Background="{TemplateBinding Foreground}"
                                    CornerRadius="2"/>
                            </Decorator>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--
        Menus
    -->

    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="FlowDirection" Value="{Binding Source={x:Static res:Strings.FlowDirection}, Converter={StaticResource FlowDirectionConverter}}"/>
    </Style>


    <!--
        Status Bars
    -->

    <Style TargetType="{x:Type StatusBar}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.InfoBrushKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InfoTextBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"/>
        <Setter Property="BorderThickness" Value="0,1"/>
        <Style.Resources>
            <Style TargetType="{x:Type StatusBarItem}">
                <Setter Property="VerticalContentAlignment" Value="Top"/>
            </Style>
            <Style TargetType="{x:Type TextBlock}">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InfoTextBrushKey}}"/>
            </Style>
        </Style.Resources>
    </Style>


    <!--
        Windows
    -->

    <Style x:Key="ConnectWizardWindowStyle" TargetType="{x:Type Window}">
        <Setter Property="FlowDirection" Value="{Binding Source={x:Static res:Strings.FlowDirection}, Converter={StaticResource FlowDirectionConverter}}"/>
        <Setter Property="FontFamily" Value="{StaticResource OpenSansFont}"/>
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="Background" Value="{StaticResource WindowBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource WindowTextBrush}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsBusy}" Value="True">
                <Setter Property="Cursor" Value="AppStarting"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <!--
        Pages
    -->

    <Style x:Key="ConnectWizardPageStyle" TargetType="{x:Type Page}">
        <Setter Property="Width" Value="319"/>
        <Setter Property="Height" Value="419"/>
        <Setter Property="Foreground" Value="{StaticResource WindowTextBrush}"/>
        <Setter Property="FlowDirection" Value="{Binding Source={x:Static res:Strings.FlowDirection}, Converter={StaticResource FlowDirectionConverter}}"/>
        <Setter Property="FontFamily" Value="{StaticResource OpenSansFont}"/>
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Page}">
                    <Grid Margin="17,7,17,0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="1*"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="1*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>

                        <Button
                            Style="{StaticResource NavigationButtonStyle}"
                            ToolTip="{Binding Source={x:Static res:Strings.ButtonBackTitle}, Converter={StaticResource RemoveAccessKeyConverter}}"
                            AutomationProperties.Name="{Binding Source={x:Static res:Strings.ButtonBackTitle}, Converter={StaticResource RemoveAccessKeyConverter}}"
                            Command="{Binding NavigateBack}">
                            <ContentControl
                                ContentTemplate="{StaticResource ChevronLeftIcon}"
                                IsTabStop="False"/>
                        </Button>

                        <ContentControl
                            Grid.Column="1"
                            AutomationProperties.Name="{Binding ClientTitle, Source={x:Static prop:Settings.Default}}"
                            Style="{StaticResource HeadingControlStyle}"
                            ContentTemplate="{StaticResource ClientLogoIcon}"
                            IsTabStop="False"/>

                        <Grid
                            Grid.Column="2"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Margin="-4">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*"/>
                                <ColumnDefinition Width="1*"/>
                            </Grid.ColumnDefinitions>

                            <Button
                                Style="{StaticResource AuxButtonStyle}"
                                ToolTip="{Binding Source={x:Static res:Strings.ButtonSettingsTitle}, Converter={StaticResource RemoveAccessKeyConverter}}"
                                AutomationProperties.Name="{Binding Source={x:Static res:Strings.ButtonSettingsTitle}, Converter={StaticResource RemoveAccessKeyConverter}}"
                                Command="{Binding Wizard.NavigateTo}"
                                CommandParameter="{Binding Wizard.SettingsPage}">
                                <ContentControl
                                    ContentTemplate="{StaticResource SettingsIcon}"
                                    IsTabStop="False"/>
                            </Button>

                            <Button
                                Grid.Column="1"
                                Style="{StaticResource AuxButtonStyle}"
                                ToolTip="{Binding Source={x:Static res:Strings.ButtonAboutTitle}, Converter={StaticResource RemoveAccessKeyConverter}}"
                                AutomationProperties.Name="{Binding Source={x:Static res:Strings.ButtonAboutTitle}, Converter={StaticResource RemoveAccessKeyConverter}}"
                                Command="{Binding Wizard.NavigateTo}"
                                CommandParameter="{Binding Wizard.AboutPage}">
                                <ContentControl
                                    ContentTemplate="{StaticResource AboutIcon}"
                                    IsTabStop="False"/>
                            </Button>
                        </Grid>

                        <ContentPresenter
                            Grid.ColumnSpan="3"
                            Grid.Row="1"
                            Margin="-7"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--
        Secure internet server
    -->

    <DataTemplate DataType="{x:Type models:SecureInternetServer}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20"/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Image
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                MaxWidth="20" MaxHeight="20"
                Source="{Binding Path=Country.Code, Converter={StaticResource CountryCodeFlagConverter}}"/>
            <TextBlock
                Grid.Column="1"
                Margin="7,0,0,0"
                Text="{Binding}"/>
        </Grid>
    </DataTemplate>
</ResourceDictionary>
